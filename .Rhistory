#function to scrap from an API cocktails by their first letter
get_cocktails_by_letter <- function(letter) {
url <- paste0("https://www.thecocktaildb.com/api/json/v1/1/search.php?f=", letter)
response <- GET(url)
if (response$status_code == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
return(json_data$drinks)
} else {
return(NULL)
}
}
all_cocktails <- lapply(letters, get_cocktails_by_letter)
all_cocktails <- bind_rows(all_cocktails)
all_cocktails = as.data.frame(all_cocktails)
all_cocktails = all_cocktails %>%
select(-idDrink, -strDrinkAlternate, -strTags, -strVideo, -strIBA, -strInstructionsDE, -strInstructionsES, -strInstructionsFR, -strInstructionsIT, -`strInstructionsZH-HANS` , -`strInstructionsZH-HANT`, -strDrinkThumb, -strIngredient12, -strIngredient13, -strIngredient14, -strIngredient15, -strImageSource, -strImageAttribution, -strCreativeCommonsConfirmed, -dateModified) %>%
rename(name = strDrink,
category = strCategory,
alcoholic = strAlcoholic,
glass = strGlass,
instructions = strInstructions,
ingredient_1 = strIngredient1,
ingredient_2 = strIngredient2,
ingredient_3 = strIngredient3,
ingredient_4 = strIngredient4,
ingredient_5 = strIngredient5,
ingredient_6 = strIngredient6,
ingredient_7 = strIngredient7,
ingredient_8 = strIngredient8,
ingredient_9 = strIngredient9,
ingredient_10 = strIngredient10,
ingredient_11 = strIngredient11)
View(all_cocktails)
rm(list = ls())
#loading of packages
library(httr)
library(jsonlite)
library(dplyr)
#function to scrap from an API cocktails by their first letter
get_cocktails_by_letter <- function(letter) {
url <- paste0("https://www.thecocktaildb.com/api/json/v1/1/search.php?f=", letter)
response <- GET(url)
if (response$status_code == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
return(json_data$drinks)
} else {
return(NULL)
}
}
all_cocktails <- lapply(letters, get_cocktails_by_letter)
all_cocktails <- bind_rows(all_cocktails)
all_cocktails = as.data.frame(all_cocktails)
all_cocktails = all_cocktails %>%
select(-idDrink, -strDrinkAlternate, -strTags, -strVideo, -strIBA,
-strInstructionsDE, -strInstructionsES, -strInstructionsFR,
-strInstructionsIT, -`strInstructionsZH-HANS` , -`strInstructionsZH-HANT`,
-strDrinkThumb, -strIngredient12, -strIngredient13, -strIngredient14, -strIngredient15,
-strImageSource, -strImageAttribution, -strCreativeCommonsConfirmed, -dateModified,
-strMeasure12, -strMeasure13, -strMeasure14, -strMeasure15) %>%
rename(name = strDrink,
category = strCategory,
alcoholic = strAlcoholic,
glass = strGlass,
instructions = strInstructions,
ingredient_1 = strIngredient1,
ingredient_2 = strIngredient2,
ingredient_3 = strIngredient3,
ingredient_4 = strIngredient4,
ingredient_5 = strIngredient5,
ingredient_6 = strIngredient6,
ingredient_7 = strIngredient7,
ingredient_8 = strIngredient8,
ingredient_9 = strIngredient9,
ingredient_10 = strIngredient10,
ingredient_11 = strIngredient11,
measure_1 = strMeasure1,
measure_2 = strMeasure2,
measure_3 = strMeasure3,
measure_4 = strMeasure4,
measure_5 = strMeasure5,
measure_6 = strMeasure6,
measure_7 = strMeasure7,
measure_8 = strMeasure8,
measure_9 = strMeasure9,
measure_10 = strMeasure10,
measure_11 = strMeasure11)
View(all_cocktails)
rm(list = ls())
#loading of packages
library(httr)
library(jsonlite)
library(dplyr)
#function to scrap from an API cocktails by their first letter
get_cocktails_by_letter <- function(letter) {
url <- paste0("https://www.thecocktaildb.com/api/json/v1/1/search.php?f=", letter)
response <- GET(url)
if (response$status_code == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
return(json_data$drinks)
} else {
return(NULL)
}
}
all_cocktails <- lapply(letters, get_cocktails_by_letter)
all_cocktails <- bind_rows(all_cocktails)
all_cocktails = as.data.frame(all_cocktails)
all_cocktails = all_cocktails %>%
select(-idDrink, -strDrinkAlternate, -strTags, -strVideo, -strIBA,
-strInstructionsDE, -strInstructionsES, -strInstructionsFR,
-strInstructionsIT, -`strInstructionsZH-HANS` , -`strInstructionsZH-HANT`,
-strDrinkThumb, -strIngredient12, -strIngredient13, -strIngredient14, -strIngredient15,
-strImageSource, -strImageAttribution, -strCreativeCommonsConfirmed, -dateModified,
-strMeasure12, -strMeasure13, -strMeasure14, -strMeasure15) %>%
rename(cocktail_name = strDrink,
category = strCategory,
alcoholic = strAlcoholic,
glass = strGlass,
instructions = strInstructions,
ingredient_1 = strIngredient1,
ingredient_2 = strIngredient2,
ingredient_3 = strIngredient3,
ingredient_4 = strIngredient4,
ingredient_5 = strIngredient5,
ingredient_6 = strIngredient6,
ingredient_7 = strIngredient7,
ingredient_8 = strIngredient8,
ingredient_9 = strIngredient9,
ingredient_10 = strIngredient10,
ingredient_11 = strIngredient11,
measure_1 = strMeasure1,
measure_2 = strMeasure2,
measure_3 = strMeasure3,
measure_4 = strMeasure4,
measure_5 = strMeasure5,
measure_6 = strMeasure6,
measure_7 = strMeasure7,
measure_8 = strMeasure8,
measure_9 = strMeasure9,
measure_10 = strMeasure10,
measure_11 = strMeasure11)
View(all_cocktails)
rm(list = ls())
# Chargement des packages nécessaires
library(httr)
library(jsonlite)
library(dplyr)
# Fonction pour récupérer les cocktails par leur première lettre
get_cocktails_by_letter <- function(letter) {
url <- paste0("https://www.thecocktaildb.com/api/json/v1/1/search.php?f=", letter)
response <- GET(url)
if (response$status_code == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
return(json_data$drinks)
} else {
return(NULL)
}
}
# Obtenir tous les cocktails
all_cocktails <- lapply(letters, get_cocktails_by_letter)
all_cocktails <- bind_rows(all_cocktails)
# Nettoyer et structurer les données
all_cocktails <- all_cocktails %>%
select(-idDrink, -strDrinkAlternate, -strTags, -strVideo, -strIBA,
-strInstructionsDE, -strInstructionsES, -strInstructionsFR,
-strInstructionsIT, -`strInstructionsZH-HANS` , -`strInstructionsZH-HANT`,
-strDrinkThumb, -strIngredient12, -strIngredient13, -strIngredient14, -strIngredient15,
-strImageSource, -strImageAttribution, -strCreativeCommonsConfirmed, -dateModified,
-strMeasure12, -strMeasure13, -strMeasure14, -strMeasure15) %>%
rename(cocktail_name = strDrink,
category = strCategory,
alcoholic = strAlcoholic,
glass = strGlass,
instructions = strInstructions,
ingredient_1 = strIngredient1,
ingredient_2 = strIngredient2,
ingredient_3 = strIngredient3,
ingredient_4 = strIngredient4,
ingredient_5 = strIngredient5,
ingredient_6 = strIngredient6,
ingredient_7 = strIngredient7,
ingredient_8 = strIngredient8,
ingredient_9 = strIngredient9,
ingredient_10 = strIngredient10,
ingredient_11 = strIngredient11,
measure_1 = strMeasure1,
measure_2 = strMeasure2,
measure_3 = strMeasure3,
measure_4 = strMeasure4,
measure_5 = strMeasure5,
measure_6 = strMeasure6,
measure_7 = strMeasure7,
measure_8 = strMeasure8,
measure_9 = strMeasure9,
measure_10 = strMeasure10,
measure_11 = strMeasure11)
# Fonction pour trouver un cocktail en fonction des goûts
find_by_taste <- function(category) {
cocktails <- all_cocktails %>% filter(grepl(category, category, ignore.case = TRUE))
if (nrow(cocktails) == 0) {
return("Aucun cocktail trouvé pour cette catégorie.")
} else {
return(cocktails$cocktail_name)
}
}
# Fonction pour trouver un cocktail en fonction des ingrédients
find_by_ingredients <- function(available_ingredients) {
matching_cocktails <- all_cocktails %>%
rowwise() %>%
filter(any(c_across(starts_with("ingredient_")) %in% available_ingredients)) %>%
ungroup()
if (nrow(matching_cocktails) == 0) {
return("Aucun cocktail trouvé avec ces ingrédients.")
} else {
return(matching_cocktails$cocktail_name)
}
}
# Fonction principale pour interagir avec l'utilisateur
main_function <- function() {
cat("Bienvenue dans le système de recommandation de cocktails !\n")
choice <- readline(prompt = "Souhaitez-vous trouver un cocktail basé sur vos goûts (1) ou sur vos ingrédients disponibles (2) ? Entrez 1 ou 2 : ")
if (choice == "1") {
category <- readline(prompt = "Entrez une catégorie (par exemple : Tropical, Classic, etc.) : ")
result <- find_by_taste(category)
cat("Voici les cocktails correspondants :\n", paste(result, collapse = ", "), "\n")
} else if (choice == "2") {
ingredients <- readline(prompt = "Entrez vos ingrédients disponibles, séparés par des virgules : ")
ingredients_list <- strsplit(ingredients, ",")[[1]]
ingredients_list <- trimws(ingredients_list)  # Supprimer les espaces
result <- find_by_ingredients(ingredients_list)
cat("Voici les cocktails correspondants :\n", paste(result, collapse = ", "), "\n")
} else {
cat("Choix invalide. Veuillez redémarrer.\n")
}
}
# Lancer la fonction principale
main_function()
# Lancer la fonction principale
main_function()
# Lancer la fonction principale
main_function()
rm(list = ls())
#loading of packages
library(httr)
library(jsonlite)
library(dplyr)
#function to scrap from an API cocktails by their first letter
get_cocktails_by_letter <- function(letter) {
url <- paste0("https://www.thecocktaildb.com/api/json/v1/1/search.php?f=", letter)
response <- GET(url)
if (response$status_code == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
return(json_data$drinks)
} else {
return(NULL)
}
}
all_cocktails <- lapply(letters, get_cocktails_by_letter)
all_cocktails <- bind_rows(all_cocktails)
all_cocktails = as.data.frame(all_cocktails)
all_cocktails = all_cocktails %>%
select(-idDrink, -strDrinkAlternate, -strTags, -strVideo, -strIBA,
-strInstructionsDE, -strInstructionsES, -strInstructionsFR,
-strInstructionsIT, -`strInstructionsZH-HANS` , -`strInstructionsZH-HANT`,
-strDrinkThumb, -strIngredient12, -strIngredient13, -strIngredient14, -strIngredient15,
-strImageSource, -strImageAttribution, -strCreativeCommonsConfirmed, -dateModified,
-strMeasure12, -strMeasure13, -strMeasure14, -strMeasure15) %>%
rename(cocktail_name = strDrink,
category = strCategory,
alcoholic = strAlcoholic,
glass = strGlass,
instructions = strInstructions,
ingredient_1 = strIngredient1,
ingredient_2 = strIngredient2,
ingredient_3 = strIngredient3,
ingredient_4 = strIngredient4,
ingredient_5 = strIngredient5,
ingredient_6 = strIngredient6,
ingredient_7 = strIngredient7,
ingredient_8 = strIngredient8,
ingredient_9 = strIngredient9,
ingredient_10 = strIngredient10,
ingredient_11 = strIngredient11,
measure_1 = strMeasure1,
measure_2 = strMeasure2,
measure_3 = strMeasure3,
measure_4 = strMeasure4,
measure_5 = strMeasure5,
measure_6 = strMeasure6,
measure_7 = strMeasure7,
measure_8 = strMeasure8,
measure_9 = strMeasure9,
measure_10 = strMeasure10,
measure_11 = strMeasure11)
View(all_cocktails)
# Lancer la fonction principale
main_function()
# Chargement des packages nécessaires
library(httr)
library(jsonlite)
library(dplyr)
# Fonction pour récupérer les cocktails par leur première lettre
get_cocktails_by_letter <- function(letter) {
url <- paste0("https://www.thecocktaildb.com/api/json/v1/1/search.php?f=", letter)
response <- GET(url)
if (response$status_code == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data, flatten = TRUE)
return(json_data$drinks)
} else {
return(NULL)
}
}
# Obtenir tous les cocktails
all_cocktails <- lapply(letters, get_cocktails_by_letter)
all_cocktails <- bind_rows(all_cocktails)
# Nettoyer et structurer les données
all_cocktails <- all_cocktails %>%
select(-idDrink, -strDrinkAlternate, -strTags, -strVideo, -strIBA,
-strInstructionsDE, -strInstructionsES, -strInstructionsFR,
-strInstructionsIT, -`strInstructionsZH-HANS` , -`strInstructionsZH-HANT`,
-strDrinkThumb, -strIngredient12, -strIngredient13, -strIngredient14, -strIngredient15,
-strImageSource, -strImageAttribution, -strCreativeCommonsConfirmed, -dateModified,
-strMeasure12, -strMeasure13, -strMeasure14, -strMeasure15) %>%
rename(cocktail_name = strDrink,
category = strCategory,
alcoholic = strAlcoholic,
glass = strGlass,
instructions = strInstructions,
ingredient_1 = strIngredient1,
ingredient_2 = strIngredient2,
ingredient_3 = strIngredient3,
ingredient_4 = strIngredient4,
ingredient_5 = strIngredient5,
ingredient_6 = strIngredient6,
ingredient_7 = strIngredient7,
ingredient_8 = strIngredient8,
ingredient_9 = strIngredient9,
ingredient_10 = strIngredient10,
ingredient_11 = strIngredient11,
measure_1 = strMeasure1,
measure_2 = strMeasure2,
measure_3 = strMeasure3,
measure_4 = strMeasure4,
measure_5 = strMeasure5,
measure_6 = strMeasure6,
measure_7 = strMeasure7,
measure_8 = strMeasure8,
measure_9 = strMeasure9,
measure_10 = strMeasure10,
measure_11 = strMeasure11)
# Fonction pour trouver un cocktail en fonction des goûts
find_by_taste <- function(category) {
cocktails <- all_cocktails %>% filter(grepl(category, category, ignore.case = TRUE))
if (nrow(cocktails) == 0) {
return("Aucun cocktail trouvé pour cette catégorie.")
} else {
return(cocktails$cocktail_name)
}
}
# Fonction pour trouver un cocktail en fonction des ingrédients
find_by_ingredients <- function(available_ingredients) {
matching_cocktails <- all_cocktails %>%
rowwise() %>%
filter(any(c_across(starts_with("ingredient_")) %in% available_ingredients)) %>%
ungroup()
if (nrow(matching_cocktails) == 0) {
return("Aucun cocktail trouvé avec ces ingrédients.")
} else {
return(matching_cocktails$cocktail_name)
}
}
# Fonction principale pour interagir avec l'utilisateur
main_function <- function() {
cat("Bienvenue dans le système de recommandation de cocktails !\n")
choice <- readline(prompt = "Souhaitez-vous trouver un cocktail basé sur vos goûts (1) ou sur vos ingrédients disponibles (2) ? Entrez 1 ou 2 : ")
if (choice == "1") {
category <- readline(prompt = "Entrez une catégorie (par exemple : Tropical, Classic, etc.) : ")
result <- find_by_taste(category)
cat("Voici les cocktails correspondants :\n", paste(result, collapse = ", "), "\n")
} else if (choice == "2") {
ingredients <- readline(prompt = "Entrez vos ingrédients disponibles, séparés par des virgules : ")
ingredients_list <- strsplit(ingredients, ",")[[1]]
ingredients_list <- trimws(ingredients_list)  # Supprimer les espaces
result <- find_by_ingredients(ingredients_list)
cat("Voici les cocktails correspondants :\n", paste(result, collapse = ", "), "\n")
} else {
cat("Choix invalide. Veuillez redémarrer.\n")
}
}
# Lancer la fonction principale
main_function()
library(shiny)
library(readxl)
library(dplyr)
library(shinythemes)
# lire le fichier Excel
cocktails <- read_excel("~/perso/cocktails.xlsx")
# fonction pour filtrer les cocktails en fonction des ingrédients disponibles
filtrer_cocktails_par_ingredients <- function(data, alcools, softs, sirops, autres) {
data %>%
filter((`alcool 1` %in% alcools | is.na(`alcool 1`)) &
(`alcool 2` %in% alcools | is.na(`alcool 2`)) &
(`alcool 3` %in% alcools | is.na(`alcool 3`)) &
(`soft 1` %in% softs | is.na(`soft 1`)) &
(`soft 2` %in% softs | is.na(`soft 2`)) &
(sirop %in% sirops | is.na(sirop)) &
(autre %in% autres | is.na(autre)))
}
alcools_uniques <- unique(c(cocktails$`alcool 1`, cocktails$`alcool 2`, cocktails$`alcool 3`))
softs_uniques <- unique(c(cocktails$`soft 1`, cocktails$`soft 2`))
sirops_uniques <- unique(cocktails$sirop)
autres_uniques <- unique(cocktails$autre)
# Définir l'interface utilisateur
ui <- fluidPage(
theme = shinytheme("journal"),
titlePanel("On boit quoi ??"),
sidebarLayout(
sidebarPanel(
selectInput("alcools", "quelles bouteills t'as ?",
choices = alcools_uniques, selected = NULL, multiple = TRUE),
selectInput("softs", "quels softs t'as ?",
choices = softs_uniques, selected = NULL, multiple = TRUE),
selectInput("sirops", "quels sirops t'as ?",
choices = sirops_uniques, selected = NULL, multiple = TRUE),
selectInput("autres", "et il reste quoi dans ton frigo ??",
choices = autres_uniques, selected = NULL, multiple = TRUE),
actionButton("goButton", "vamos")
),
mainPanel(
uiOutput("cocktailsList"),
uiOutput("ingredientsInfo")
)
)
)
# Définir le serveur
server <- function(input, output, session) {
observeEvent(input$goButton, {
# Extraire les ingrédients des entrées utilisateur
alcools <- input$alcools
softs <- input$softs
sirops <- input$sirops
autres <- input$autres
# Filtrer les cocktails selon les ingrédients disponibles
cocktails_possibles <- filtrer_cocktails_par_ingredients(cocktails, alcools, softs, sirops, autres)
# Remplacer les noms manquants par "Nom manquant"
cocktails_possibles <- cocktails_possibles %>%
mutate(`nom du cocktail` = ifelse(is.na(`nom du cocktail`), "Nom manquant", `nom du cocktail`)) %>%
filter(!is.na(`alcool 1`)) %>%
mutate(note = round(note, 1))
# Créer une liste de cocktails avec un bouton pour chaque cocktail
output$cocktailsList <- renderUI({
if (nrow(cocktails_possibles) == 0 ) {
return (tags$p("j'ai rien pour toi ma puce, y'a besoin d'aller faire les courses là !"))
}
cocktails_list <- lapply(1:nrow(cocktails_possibles), function(i) {
cocktail <- cocktails_possibles[i, ]
tagList(
tags$div(
tags$p(tags$strong(paste(cocktail$`nom du cocktail`))),
tags$p(paste("Note : ", cocktail$note)),
actionButton(paste0("btn_", i), "Voir les détails", class = "btn btn-primary"),
tags$hr()
)
)
})
do.call(tagList, cocktails_list)
})
# Afficher les détails des ingrédients lorsqu'un bouton est cliqué
observe({
lapply(1:nrow(cocktails_possibles), function(i) {
observeEvent(input[[paste0("btn_", i)]], {
cocktail <- cocktails_possibles[i, ]
output$ingredientsInfo <- renderUI({
info_list <- c()
if (!is.na(cocktail$`alcool 1`) && cocktail$`alcool 1` != "") {
info_list <- c(info_list, paste("Alcool 1 : ", cocktail$`alcool 1`))
}
if (!is.na(cocktail$`alcool 2`) && cocktail$`alcool 2` != "") {
info_list <- c(info_list, paste("Alcool 2 : ", cocktail$`alcool 2`))
}
if (!is.na(cocktail$`alcool 3`) && cocktail$`alcool 3` != "") {
info_list <- c(info_list, paste("Alcool 3 : ", cocktail$`alcool 3`))
}
if (!is.na(cocktail$`soft 1`) && cocktail$`soft 1` != "") {
info_list <- c(info_list, paste("Soft 1 : ", cocktail$`soft 1`))
}
if (!is.na(cocktail$`soft 2`) && cocktail$`soft 2` != "") {
info_list <- c(info_list, paste("Soft 2 : ", cocktail$`soft 2`))
}
if (!is.na(cocktail$sirop) && cocktail$sirop != "") {
info_list <- c(info_list, paste("Sirop : ", cocktail$sirop))
}
if (!is.na(cocktail$autre) && cocktail$autre != "") {
info_list <- c(info_list, paste("Autre : ", cocktail$autre))
}
tagList(
tags$p(tags$strong(paste("Ingrédients pour :", cocktail$`nom du cocktail`))),
tags$ul(lapply(info_list, function(info) tags$li(info)))
)
})
})
})
})
})
}
# lancer l'application
shinyApp(ui = ui, server = server)
